<<<<<<< HEAD
# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

=======
>>>>>>> main
name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ${{ matrix.os }}
<<<<<<< HEAD
=======
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
>>>>>>> main
    strategy:
      matrix:
        os: [windows-latest, macos-latest]

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python 3.12
<<<<<<< HEAD
        uses: actions/setup-python@v3
=======
        uses: actions/setup-python@v5
>>>>>>> main
        with:
          python-version: "3.12"
      
      - name: Install PortAudio on macOS
        if: runner.os == 'macOS'
        run: brew install portaudio
      
<<<<<<< HEAD
      - name: Install dependencies
=======
      # Install dependencies using Bash on macOS
      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
>>>>>>> main
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install flake8
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
<<<<<<< HEAD
      - name: Test with unittest
        shell: bash
        run: |
          python -m unittest discover
=======
      
      # Install dependencies using PowerShell on Windows
      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          pip install flake8
          if (Test-Path requirements.txt) { pip install -r requirements.txt }
      
      # Run tests using Bash on macOS
      - name: Test with unittest (macOS)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          python -m unittest discover -s tests

      # Run tests using PowerShell on Windows
      - name: Test with unittest (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          python -m unittest discover -s tests
>>>>>>> main
